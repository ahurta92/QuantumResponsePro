from quantumresponsepro import DaltonRunner
from quantumresponsepro import DaltonRunner
from pathlib import Path
import glob


def get_molecule_list(database_path: Path):
    """
    Get list of molecules from database path.
    """
    molecule_path = database_path.joinpath("molecules")

    mol_p = glob.glob(str(molecule_path.joinpath('*.mol')))
    molecule_list = [mol.split('.')[0] for mol in mol_p]

    return molecule_list


def generate_paths(database_path: Path):
    """
    Generate paths for dalton and molecule directories.
    """
    dalton_path = database_path.joinpath("dalton")
    molecule_path = database_path.joinpath("molecules")

    return dalton_path, molecule_path


def generate_molecule_excited_state_keys(num_states, database_path: Path, overwrite: bool = False):
    """
    Generate excited state keys for a given molecule, xc functional
    and basis set. Reads data from dalton directory in database_path.
    If data is not found can be generated by running dalton with run = True.
    """
    dalton_path, molecule_path = generate_paths(database_path)

    mol_excited_path = dalton_path.joinpath("molecule_excited_state_keys.json")

    if mol_excited_path.exists() and not overwrite:
        return
    else:
        mol_list = get_molecule_list(database_path)

    return dal_runner.get_excited_json(molecule, xc, basis, False, 4)


def generate_dalton_excited_state_json(xc, basis_list, database_path: Path, run: bool = False):
    """
    Generate excited state json files for a given xc functional
    and basis set list. Reads data from dalton directory in database_path.
    If data is not found can be generated by running dalton with run = True.
    """
    molecule_path = database_path.joinpath("molecules")

    print('database path', database_path)
    print('molecule path', molecule_path)

    print(molecule_list)
    dal_runner = DaltonRunner(database_path, run)

    data_dict = {xc: {}}
    for molecule in molecule_list:
        data_dict[xc][molecule] = {}
        for basis in basis_list:
            data_dict[xc][molecule][basis] = dal_runner.get_excited_json(molecule, xc, basis, run, 4)

    return data_dict
